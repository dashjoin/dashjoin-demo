{
    "ID": "Storyboard",
    "layout": {
        "widget": "page",
        "pageLayout": "horizontal",
        "children": [
            {
                "widget": "markdown",
                "title": null,
                "markdown": "# Universal Database Browser\n\n* Different kinds of databases (relational, document, graph) can be [registered](/#/table/config/dj-database)\n* All metadata is collected automatically\n* By default, every table shows a [\"select all\" table](/#/table/northwind/EMPLOYEES) and a form to create new records\n* Note how the form reflects the database metadata automatically. On the new employee form, enter the letter D in the \"reports to\" field. The system automatically shows an auto-complete based on the valid range\n* All IDs are links to the respective instance pages\n* Using additional metadata, we instructed the system to use the employee last name instead of the ID as the link label\n* The [instance page](/#/resource/northwind/EMPLOYEES/2) also shows all related records\n* [On this record](/#/resource/northwind/CUSTOMERS/ALFKI), this includes related records on other databases. This relationship can be added by the user\n* Perform a [search](/#/search/cheese) across all database\n\n# Query Catalog & Editor\n\n* The query catalog manages various queries that are used in the app\n* On the [query page](/#/resource/config/dj-query-catalog/sum-products-country), press \"Editor\" to play with the query\n* [SPARQL example](/#/resource/config/dj-query-catalog/locatedInCountry)\n* [Firestore example](/#/resource/config/dj-query-catalog/firestore)\n\n# Layout Designer\n\n* Queries can be used to drive [dashboards](/#/page/Chart). Press the pen symbol, enter the widget context menu, and select edit to modify widgets. You can also drag and drop widgets if the grid layout is active (see top left)\n* Instance pages can also be customized. The [customer page](/#/resource/northwind/CUSTOMERS/ALFKI) contains a widget to send an email to the customer and to check the customer address using an external address validation service\n\n# Functions and Processes\n\n* [Functions](/#/table/config/dj-function) allow configuring external services such as email and REST APIs\n* [This service](/#/resource/config/dj-function/address) configures the address service used on the customer page\n* [Email](/#/resource/config/dj-function/email) is defined here\n\n# Data Integration and Federation\n\n* Functions can also include extract transform load (ETL) that allows loading data into one of the connected DBs\n* [This example](/#/resource/config/dj-function/misp) loads JSON data from the web. Press \"Run\" to start the ETL. This will create a new [table](/#/table/sqlite/MISP_Event) and load the data.\n\n# Rich Support Matrix\n\n* As mentioned before, Dashjoin can handle relational, document, and graph DBs\n* Dashjoin also supports graph queries offered by the databases and even support [OpenCypher queries](/#/resource/config/dj-query-catalog/cypher) across databases\n* Graph queries can also be used on Charts and [Tables](/#/page/Chart) (the org chart display is driven by the OpenCypher query)"
            }
        ]
    }
}